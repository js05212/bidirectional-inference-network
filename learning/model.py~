from __future__ import print_function
import torch
import torch.nn as nn
import torch.nn.functional as F
from config import *
from learning.utils import *

class Enc(nn.Module):
    def __init__(self):
        super(Enc, self).__init__()
        width = 64
        self.fc1 = nn.Linear(1, width)
        self.fc2 = nn.Linear(width, width)
        # self.fc3 = nn.Linear(width, width)
        # self.fc4 = nn.Linear(width, width)
        self.fc5 = nn.Linear(width, 1)

    def forward(self, x):
        # print('pre input x', x)
        input_x = x[:, 0].unsqueeze(1)  # v1
        label_y = x[:, 1].unsqueeze(1)  # v2

        x = F.relu(self.fc1(input_x))
        x = F.relu(self.fc2(x))
        # x = F.relu(self.fc3(x))
        # x = F.relu(self.fc4(x))
        x = self.fc5(x)
        loss = full_mse_loss(x, label_y) # v2

        return x, loss


class Enc_inf(nn.Module):
    def __init__(self):
        super(Enc_inf, self).__init__()
        width = 64
        self.fc1 = nn.Linear(1, width)
        self.fc2 = nn.Linear(width, width)
        # self.fc3 = nn.Linear(width, width)
        # self.fc4 = nn.Linear(width, width)
        self.fc5 = nn.Linear(width, 1)

    def forward(self, x):
        x, target = x

        label_y = x[:, 1].unsqueeze(1) # v2
        x = F.relu(self.fc1(target)) # U1
        x = F.relu(self.fc2(x))
        # x = F.relu(self.fc3(x))
        # x = F.relu(self.fc4(x))
        x = self.fc5(x) # v2
        loss = full_mse_loss(x, label_y)
        return x, loss

class Enc_3(nn.Module):
    def __init__(self):
        super(Enc_3, self).__init__()
        width = 64
        self.fc1_1 = nn.Linear(1, width)
        # self.fc3 = nn.Linear(width, width)
        # self.fc4 = nn.Linear(width, width)
        self.fc5_1 = nn.Linear(width, 1)

        self.fc1_2 = nn.Linear(2, width)
        # self.fc3 = nn.Linear(width, width)
        # self.fc4 = nn.Linear(width, width)
        self.fc5_2 = nn.Linear(width, 1)

    def forward(self, x):
        # print('pre input x', x)
        BB = x[:, 0].unsqueeze(1)
        V1 = x[:, 1].unsqueeze(1)
        V2 = x[:, 2].unsqueeze(1)

        v1_r = F.relu(self.fc1_1(BB))
        v1_r = self.fc5_1(v1_r)
        loss1 = full_mse_loss(v1_r, V1)

        v2_r = torch.cat((V1, BB), 1)
        v2_r = F.relu(self.fc1_2(v2_r))
        v2_r = self.fc5_2(v2_r)
        loss2 = full_mse_loss(V2, v2_r)

        return v1_r, v2_r, loss1 + loss2

class Enc_inf_3(nn.Module):
    def __init__(self):
        super(Enc_inf_3, self).__init__()
        width = 64
        self.fc1_1 = nn.Linear(1, width)
        # self.fc3 = nn.Linear(width, width)
        # self.fc4 = nn.Linear(width, width)
        self.fc5_1 = nn.Linear(width, 1)

        self.fc1_2 = nn.Linear(2, width)
        # self.fc3 = nn.Linear(width, width)
        # self.fc4 = nn.Linear(width, width)
        self.fc5_2 = nn.Linear(width, 1)

    def forward(self, x):
        x, target = x
        BB = x[:, 0].unsqueeze(1)
        V1 = x[:, 1].unsqueeze(1)
        V2 = x[:, 2].unsqueeze(1)

        v1_r = F.relu(self.fc1_1(BB))
        v1_r = self.fc5_1(v1_r)
        v1_r = v1_r.detach()
        #loss1 = 0.001 * full_mse_loss(v1_r, target)
        loss1 = torch.sum((target - v1_r) ** 2) / target.size()[0]

        v2_r = torch.cat((target, BB), 1)
        v2_r = F.relu(self.fc1_2(v2_r))
        # x = F.relu(self.fc2(x))
        # x = F.relu(self.fc3(x))
        # x = F.relu(self.fc4(x))
        v2_r = self.fc5_2(v2_r)
        loss2 = full_mse_loss(V2, v2_r)
        return v1_r, loss1 + loss2


# class Enc(nn.Module):
#     def __init__(self):
#         super(Enc, self).__init__()
#         width = 512
#         self.fc1 = nn.Linear(1, width)
#         self.fc2 = nn.Linear(width, width)
#         self.fc3 = nn.Linear(width, width)
#         # self.fc4 = nn.Linear(width, width)
#         self.fc5 = nn.Linear(width, 1)
#
#     def forward(self, x):
#         # print('pre input x', x)
#         input_x = x[:, 0].unsqueeze(1)
#         label_y = x[:, 1].unsqueeze(1)
#
#         x = F.relu(self.fc1(input_x))
#         x = F.relu(self.fc2(x))
#         x = F.relu(self.fc3(x))
#         # x = F.relu(self.fc4(x))
#         x = self.fc5(x)
#         loss = full_mse_loss(x, label_y)
#
#         return x, loss


# class Enc_inf(nn.Module):
#     def __init__(self):
#         super(Enc_inf, self).__init__()
#         width = 512
#         self.fc1 = nn.Linear(1, width)
#         self.fc2 = nn.Linear(width, width)
#         self.fc3 = nn.Linear(width, width)
#         # self.fc4 = nn.Linear(width, width)
#         self.fc5 = nn.Linear(width, 1)
#
#     def forward(self, x):
#         x, target = x
#
#         input_x = x[:, 0].unsqueeze(1)
#         x = F.relu(self.fc1(input_x))
#         x = F.relu(self.fc2(x))
#         x = F.relu(self.fc3(x))
#         # x = F.relu(self.fc4(x))
#         x = self.fc5(x)
#         x = x.detach()
#         loss = full_mse_loss(x, target)
#         return x, loss




